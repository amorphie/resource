// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace amorphie.resource.data.Migrations
{
    [DbContext(typeof(ResourceDBContext))]
    [Migration("20230302110415_v17")]
    partial class v17
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Privilege", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("Ttl")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("534e04f3-fc7a-47e7-8a11-ecd1989f8ea5"),
                            CreatedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9434),
                            CreatedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            CreatedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9451),
                            ModifiedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            Status = "A",
                            Tags = new[] { "tag1", "tag2" },
                            Type = (byte)0,
                            Url = "urlsample"
                        });
                });

            modelBuilder.Entity("ResourceRateLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Cron")
                        .HasColumnType("text");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Scope")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceRateLimits");
                });

            modelBuilder.Entity("ResourceRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RoleId");

                    b.ToTable("ResourceRoles");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddda4d0f-f967-43dc-bfc9-a9b4e75c6038"),
                            CreatedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9510),
                            CreatedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            CreatedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9511),
                            ModifiedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            Status = "A",
                            Tags = new[] { "tag1", "tag2" }
                        });
                });

            modelBuilder.Entity("RoleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("RoleGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("070866ee-e1b2-464c-968c-3e352dbfaee5"),
                            CreatedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9544),
                            CreatedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            CreatedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9545),
                            ModifiedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            Status = "A",
                            Tags = new[] { "tag1", "tag2" }
                        });
                });

            modelBuilder.Entity("RoleGroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGroupRoles");
                });

            modelBuilder.Entity("amorphie.core.Base.Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResourceId_Description")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResourceId_DisplayName")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleGroupId_Title")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId_Title")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId_Description");

                    b.HasIndex("ResourceId_DisplayName");

                    b.HasIndex("RoleGroupId_Title");

                    b.HasIndex("RoleId_Title");

                    b.ToTable("Translations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0f40c85-d2f0-419e-bdad-2a018b3e4ddd"),
                            CreatedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9573),
                            CreatedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            CreatedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            Label = "Açıklama",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9573),
                            ModifiedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ResourceIdDescription = new Guid("534e04f3-fc7a-47e7-8a11-ecd1989f8ea5")
                        },
                        new
                        {
                            Id = new Guid("5a70d7f3-ab00-4d76-9e14-ece9a40948b9"),
                            CreatedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9578),
                            CreatedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            CreatedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            Label = "Description",
                            Language = "en",
                            ModifiedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9579),
                            ModifiedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ResourceIdDescription = new Guid("534e04f3-fc7a-47e7-8a11-ecd1989f8ea5")
                        },
                        new
                        {
                            Id = new Guid("7b876b46-dc06-45e5-a81f-61769b85f250"),
                            CreatedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9596),
                            CreatedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            CreatedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            Label = "Başlık",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9597),
                            ModifiedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ResourceIdDisplayName = new Guid("534e04f3-fc7a-47e7-8a11-ecd1989f8ea5")
                        },
                        new
                        {
                            Id = new Guid("635df6eb-6022-4cb7-aeab-fa5eee53a2a4"),
                            CreatedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9601),
                            CreatedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            CreatedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            Label = "Rol Başlık",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9602),
                            ModifiedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            RoleIdTitle = new Guid("ddda4d0f-f967-43dc-bfc9-a9b4e75c6038")
                        },
                        new
                        {
                            Id = new Guid("354f5bef-19d0-439b-8436-bfb10f66414c"),
                            CreatedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9606),
                            CreatedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            CreatedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            Label = "Rol Grup Başlık",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 3, 2, 14, 4, 14, 936, DateTimeKind.Local).AddTicks(9606),
                            ModifiedBy = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            ModifiedByBehalfOf = new Guid("277fc767-8ec3-456f-8a95-632cbaf7d8c4"),
                            RoleGroupIdTitle = new Guid("070866ee-e1b2-464c-968c-3e352dbfaee5")
                        });
                });

            modelBuilder.Entity("ResourceRateLimit", b =>
                {
                    b.HasOne("Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ResourceRole", b =>
                {
                    b.HasOne("Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoleGroupRole", b =>
                {
                    b.HasOne("RoleGroup", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("RoleGroup");
                });

            modelBuilder.Entity("amorphie.core.Base.Translation", b =>
                {
                    b.HasOne("Resource", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("ResourceId_Description");

                    b.HasOne("Resource", null)
                        .WithMany("DisplayNames")
                        .HasForeignKey("ResourceId_DisplayName");

                    b.HasOne("RoleGroup", null)
                        .WithMany("Titles")
                        .HasForeignKey("RoleGroupId_Title");

                    b.HasOne("Role", null)
                        .WithMany("Titles")
                        .HasForeignKey("RoleId_Title");
                });

            modelBuilder.Entity("Resource", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("DisplayNames");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("RoleGroup", b =>
                {
                    b.Navigation("Titles");
                });
#pragma warning restore 612, 618
        }
    }
}
