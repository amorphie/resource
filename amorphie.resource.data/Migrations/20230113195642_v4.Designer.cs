// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace amorphie.resource.data.Migrations
{
    [DbContext(typeof(ResourceDBContext))]
    [Migration("20230113195642_v4")]
    partial class v4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ba9b5db-5164-4540-96e2-dcd5be938b66"),
                            CreatedDate = new DateTime(2023, 1, 13, 22, 56, 42, 171, DateTimeKind.Local).AddTicks(9225),
                            CreatedUser = "User1",
                            Description = "Get Account List Resource",
                            DisplayName = "Get Account List",
                            Enabled = 1,
                            Name = "account-list-get",
                            Type = "Get",
                            Url = "http://localhost:44000/cb.accounts"
                        });
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("text");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c9f6943-0899-405f-b9b5-59da5ffba330"),
                            CreatedDate = new DateTime(2023, 1, 13, 22, 56, 42, 171, DateTimeKind.Local).AddTicks(9254),
                            CreatedUser = "User1",
                            Enabled = 1,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("RoleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("text");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db110c95-0ff1-4250-b227-800e6b5c1797"),
                            CreatedDate = new DateTime(2023, 1, 13, 22, 56, 42, 171, DateTimeKind.Local).AddTicks(9284),
                            CreatedUser = "User1",
                            Enabled = 1,
                            Name = "Bireysel"
                        });
                });

            modelBuilder.Entity("RoleGroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGroupRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52f515bb-1988-4749-aa31-c84934cfa419"),
                            CreatedDate = new DateTime(2023, 1, 13, 22, 56, 42, 171, DateTimeKind.Local).AddTicks(9293),
                            CreatedUser = "User1",
                            RoleGroupId = new Guid("db110c95-0ff1-4250-b227-800e6b5c1797"),
                            RoleId = new Guid("8c9f6943-0899-405f-b9b5-59da5ffba330")
                        });
                });

            modelBuilder.Entity("RoleGroupRole", b =>
                {
                    b.HasOne("RoleGroup", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("RoleGroup");
                });
#pragma warning restore 612, 618
        }
    }
}
