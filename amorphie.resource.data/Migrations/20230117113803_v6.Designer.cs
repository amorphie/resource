// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace amorphie.resource.data.Migrations
{
    [DbContext(typeof(ResourceDBContext))]
    [Migration("20230117113803_v6")]
    partial class v6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Privilege", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("text");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Privileges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80ae9a58-ede7-4087-9af4-51718cc46378"),
                            CreatedDate = new DateTime(2023, 1, 17, 14, 38, 3, 502, DateTimeKind.Local).AddTicks(376),
                            CreatedUser = "User1",
                            Enabled = 1,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9976603-f118-4bc0-bdc9-e7999ee1e1bd"),
                            CreatedDate = new DateTime(2023, 1, 17, 14, 38, 3, 502, DateTimeKind.Local).AddTicks(298),
                            CreatedUser = "User1",
                            Description = "Get Account List Resource",
                            DisplayName = "Get Account List",
                            Enabled = 1,
                            Name = "account-list-get",
                            Type = "Get",
                            Url = "http://localhost:44000/cb.accounts"
                        });
                });

            modelBuilder.Entity("ResourceRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RoleId");

                    b.ToTable("ResourceRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b3f5958-8d17-4df3-b282-73fab2abc72e"),
                            CreatedDate = new DateTime(2023, 1, 17, 14, 38, 3, 502, DateTimeKind.Local).AddTicks(366),
                            CreatedUser = "User1",
                            ResourceId = new Guid("c9976603-f118-4bc0-bdc9-e7999ee1e1bd"),
                            RoleId = new Guid("80ae9a58-ede7-4087-9af4-51718cc46378")
                        });
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("text");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80ae9a58-ede7-4087-9af4-51718cc46378"),
                            CreatedDate = new DateTime(2023, 1, 17, 14, 38, 3, 502, DateTimeKind.Local).AddTicks(336),
                            CreatedUser = "User1",
                            Enabled = 1,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("RoleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("text");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52506503-d73a-4d0a-b091-12ec6e7fa3c4"),
                            CreatedDate = new DateTime(2023, 1, 17, 14, 38, 3, 502, DateTimeKind.Local).AddTicks(345),
                            CreatedUser = "User1",
                            Enabled = 1,
                            Name = "Bireysel"
                        });
                });

            modelBuilder.Entity("RoleGroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGroupRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("416aa449-8098-4ea3-a10d-12a5898ea9a2"),
                            CreatedDate = new DateTime(2023, 1, 17, 14, 38, 3, 502, DateTimeKind.Local).AddTicks(355),
                            CreatedUser = "User1",
                            RoleGroupId = new Guid("52506503-d73a-4d0a-b091-12ec6e7fa3c4"),
                            RoleId = new Guid("80ae9a58-ede7-4087-9af4-51718cc46378")
                        });
                });

            modelBuilder.Entity("ResourceRole", b =>
                {
                    b.HasOne("Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoleGroupRole", b =>
                {
                    b.HasOne("RoleGroup", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("RoleGroup");
                });
#pragma warning restore 612, 618
        }
    }
}
