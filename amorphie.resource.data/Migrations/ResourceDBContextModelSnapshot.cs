// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace amorphie.resource.data.Migrations
{
    [DbContext(typeof(ResourceDBContext))]
    partial class ResourceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Privilege", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("Ttl")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83135033-d8bf-4729-99e7-4734ad197f5d"),
                            CreatedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1352),
                            CreatedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            CreatedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1369),
                            ModifiedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            Status = "A",
                            Tags = new[] { "tag1", "tag2" },
                            Type = "CONNECT",
                            Url = "urlsample"
                        });
                });

            modelBuilder.Entity("ResourceRateLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Cron")
                        .HasColumnType("text");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Scope")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceRateLimits");
                });

            modelBuilder.Entity("ResourceRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RoleId");

                    b.ToTable("ResourceRoles");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d62d4d38-ecdf-4b4e-b17c-0882412340bb"),
                            CreatedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1411),
                            CreatedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            CreatedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1413),
                            ModifiedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            Status = "A",
                            Tags = new[] { "tag1", "tag2" }
                        });
                });

            modelBuilder.Entity("RoleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("RoleGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4462ca2c-981c-401d-8bcf-e228b05ddb96"),
                            CreatedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1428),
                            CreatedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            CreatedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1430),
                            ModifiedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            Status = "A",
                            Tags = new[] { "tag1", "tag2" }
                        });
                });

            modelBuilder.Entity("RoleGroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGroupRoles");
                });

            modelBuilder.Entity("Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResourceId_Description")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResourceId_DisplayName")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleGroupId_Title")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId_Title")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId_Description");

                    b.HasIndex("ResourceId_DisplayName");

                    b.HasIndex("RoleGroupId_Title");

                    b.HasIndex("RoleId_Title");

                    b.ToTable("Translations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a000f232-0bad-4740-a789-e67a5995c91f"),
                            CreatedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1446),
                            CreatedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            CreatedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            Label = "Açıklama",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1447),
                            ModifiedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ResourceIdDescription = new Guid("83135033-d8bf-4729-99e7-4734ad197f5d")
                        },
                        new
                        {
                            Id = new Guid("c11d2b3a-79d1-4245-82f4-7ead28650baa"),
                            CreatedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1451),
                            CreatedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            CreatedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            Label = "Description",
                            Language = "en",
                            ModifiedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1451),
                            ModifiedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ResourceIdDescription = new Guid("83135033-d8bf-4729-99e7-4734ad197f5d")
                        },
                        new
                        {
                            Id = new Guid("3bdfe9ce-c4b8-4a60-a526-a8d3de22b8db"),
                            CreatedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1454),
                            CreatedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            CreatedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            Label = "Başlık",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1454),
                            ModifiedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ResourceIdDisplayName = new Guid("83135033-d8bf-4729-99e7-4734ad197f5d")
                        },
                        new
                        {
                            Id = new Guid("6edc0d4e-c4b0-476e-a493-1df98dfefb68"),
                            CreatedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1461),
                            CreatedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            CreatedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            Label = "Rol Başlık",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1461),
                            ModifiedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            RoleIdTitle = new Guid("d62d4d38-ecdf-4b4e-b17c-0882412340bb")
                        },
                        new
                        {
                            Id = new Guid("fcb45d0c-fd75-45ba-bf5d-0ba577a63994"),
                            CreatedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1465),
                            CreatedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            CreatedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            Label = "Rol Grup Başlık",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 2, 21, 10, 20, 7, 224, DateTimeKind.Local).AddTicks(1465),
                            ModifiedBy = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            ModifiedByBehalfOf = new Guid("1b354a8e-c956-46cc-80fa-032914b179e0"),
                            RoleGroupIdTitle = new Guid("4462ca2c-981c-401d-8bcf-e228b05ddb96")
                        });
                });

            modelBuilder.Entity("Privilege", b =>
                {
                    b.HasOne("Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ResourceRateLimit", b =>
                {
                    b.HasOne("Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ResourceRole", b =>
                {
                    b.HasOne("Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoleGroupRole", b =>
                {
                    b.HasOne("RoleGroup", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("RoleGroup");
                });

            modelBuilder.Entity("Translation", b =>
                {
                    b.HasOne("Resource", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("ResourceId_Description");

                    b.HasOne("Resource", null)
                        .WithMany("DisplayNames")
                        .HasForeignKey("ResourceId_DisplayName");

                    b.HasOne("RoleGroup", null)
                        .WithMany("Titles")
                        .HasForeignKey("RoleGroupId_Title");

                    b.HasOne("Role", null)
                        .WithMany("Titles")
                        .HasForeignKey("RoleId_Title");
                });

            modelBuilder.Entity("Resource", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("DisplayNames");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("RoleGroup", b =>
                {
                    b.Navigation("Titles");
                });
#pragma warning restore 612, 618
        }
    }
}
