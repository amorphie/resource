// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace amorphie.resource.data.Migrations
{
    [DbContext(typeof(ResourceDBContext))]
    partial class ResourceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Privilege", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("Ttl")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("874001e3-b769-497b-b047-33b1b256c659"),
                            CreatedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7684),
                            CreatedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            CreatedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7699),
                            ModifiedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            Status = "A",
                            Tags = new[] { "tag1", "tag2" },
                            Type = (byte)0,
                            Url = "urlsample"
                        });
                });

            modelBuilder.Entity("ResourceRateLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Cron")
                        .HasColumnType("text");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Scope")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceRateLimits");
                });

            modelBuilder.Entity("ResourceRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RoleId");

                    b.ToTable("ResourceRoles");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93e8b671-641f-493f-bf54-4a67a0b64d2e"),
                            CreatedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7756),
                            CreatedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            CreatedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7757),
                            ModifiedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            Status = "A",
                            Tags = new[] { "tag1", "tag2" }
                        });
                });

            modelBuilder.Entity("RoleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("RoleGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81cf2e59-964a-4af8-83c0-454f0b642d76"),
                            CreatedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7781),
                            CreatedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            CreatedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7782),
                            ModifiedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            Status = "A",
                            Tags = new[] { "tag1", "tag2" }
                        });
                });

            modelBuilder.Entity("RoleGroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGroupRoles");
                });

            modelBuilder.Entity("Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResourceId_Description")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResourceId_DisplayName")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleGroupId_Title")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId_Title")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId_Description");

                    b.HasIndex("ResourceId_DisplayName");

                    b.HasIndex("RoleGroupId_Title");

                    b.HasIndex("RoleId_Title");

                    b.ToTable("Translations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("133e4993-fdf6-4066-9236-25db1bbb6ee4"),
                            CreatedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7809),
                            CreatedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            CreatedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            Label = "Açıklama",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7811),
                            ModifiedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ResourceIdDescription = new Guid("874001e3-b769-497b-b047-33b1b256c659")
                        },
                        new
                        {
                            Id = new Guid("5a0e94c8-33b5-4361-891b-3c78ab60c6f9"),
                            CreatedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7825),
                            CreatedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            CreatedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            Label = "Description",
                            Language = "en",
                            ModifiedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7826),
                            ModifiedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ResourceIdDescription = new Guid("874001e3-b769-497b-b047-33b1b256c659")
                        },
                        new
                        {
                            Id = new Guid("464c0dd7-8aad-4e4a-b9e8-7b6856ab7efb"),
                            CreatedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7829),
                            CreatedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            CreatedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            Label = "Başlık",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7829),
                            ModifiedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ResourceIdDisplayName = new Guid("874001e3-b769-497b-b047-33b1b256c659")
                        },
                        new
                        {
                            Id = new Guid("689cc733-306a-4891-9ed6-11791f2f10a9"),
                            CreatedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7838),
                            CreatedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            CreatedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            Label = "Rol Başlık",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7839),
                            ModifiedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            RoleIdTitle = new Guid("93e8b671-641f-493f-bf54-4a67a0b64d2e")
                        },
                        new
                        {
                            Id = new Guid("0a20e26d-c612-42b8-8618-76615112e609"),
                            CreatedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7843),
                            CreatedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            CreatedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            Label = "Rol Grup Başlık",
                            Language = "tr",
                            ModifiedAt = new DateTime(2023, 2, 22, 10, 15, 0, 930, DateTimeKind.Local).AddTicks(7844),
                            ModifiedBy = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            ModifiedByBehalfOf = new Guid("97e40e79-ad08-4b5e-896e-cb3e9d6a111b"),
                            RoleGroupIdTitle = new Guid("81cf2e59-964a-4af8-83c0-454f0b642d76")
                        });
                });

            modelBuilder.Entity("Privilege", b =>
                {
                    b.HasOne("Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ResourceRateLimit", b =>
                {
                    b.HasOne("Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ResourceRole", b =>
                {
                    b.HasOne("Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoleGroupRole", b =>
                {
                    b.HasOne("RoleGroup", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("RoleGroup");
                });

            modelBuilder.Entity("Translation", b =>
                {
                    b.HasOne("Resource", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("ResourceId_Description");

                    b.HasOne("Resource", null)
                        .WithMany("DisplayNames")
                        .HasForeignKey("ResourceId_DisplayName");

                    b.HasOne("RoleGroup", null)
                        .WithMany("Titles")
                        .HasForeignKey("RoleGroupId_Title");

                    b.HasOne("Role", null)
                        .WithMany("Titles")
                        .HasForeignKey("RoleId_Title");
                });

            modelBuilder.Entity("Resource", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("DisplayNames");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("RoleGroup", b =>
                {
                    b.Navigation("Titles");
                });
#pragma warning restore 612, 618
        }
    }
}
